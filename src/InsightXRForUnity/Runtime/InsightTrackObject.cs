using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using UnityEngine.SceneManagement; // Add this namespace for scene management

namespace InsightDesk
{
    [DisallowMultipleComponent]
    public class InsightTrackObject : MonoBehaviour
    {
        public uint instanceId
        {
            get { return _instanceId; }
        }

        public ushort prefabId = 0;

        private uint _instanceId = 0;

        private Animator _animator;
        public Animator animator => _animator;

        private TextMeshPro _tmp3D;
        private TextMeshProUGUI _tmpUI;

        private void Awake()
        {
            if (!TrackingManager.instance)
            {
                Debug.LogWarning("Could not find InsightTrackingManager instance. Is the singleton prefab missing?");
                return;
            }

            _animator = GetComponent<Animator>();
            _tmp3D = GetComponent<TextMeshPro>();
            _tmpUI = GetComponent<TextMeshProUGUI>();
            _instanceId = TrackingManager.instance.GetTrackedObjectInstanceId();

            if (prefabId == 0 &&
                TrackingManager.instance.logLevel >= TrackingManager.InsightLogLevel.Warning)
            {
                InsightUtility.LogWarning(
                    $"InsightTrackObject prefabId on {gameObject.name} is invalid. prefabId should be generated by the Insight editor window");
            }

            TrackingManager.instance.RegisterObject(this);
        }

        private void OnDestroy()
        {
            if (!TrackingManager.instance)
            {
                return;
            }

            TrackingManager.instance.UnregisterObject(this);
        }

        public InsightTrackedObjectData GetTrackedObjectData()
        {
            string sceneName = SceneManager.GetActiveScene().name; // Get the active scene name

            var trackedData = new InsightTrackedObjectData().Init(
            _instanceId, prefabId, transform, gameObject.activeInHierarchy, _animator, sceneName);
            // Extract text content if a TextMeshPro component is present
            if (_tmp3D != null)
            {
                trackedData.textContent = _tmp3D.text;
            }
            else if (_tmpUI != null)
            {
                trackedData.textContent = _tmpUI.text;
            }

            return trackedData;
        }
    }
}
